{
  "name": "proxy-stream",
  "version": "0.1.0",
  "description": "Create a wrapped stream",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/proxy-stream.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/proxy-stream",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/proxy-stream/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "through-stream": "0.0.1",
    "re-emitter": "~0.2.0"
  },
  "devDependencies": {},
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/proxy-stream/raw/master/LICENSE"
    }
  ],
  "scripts": {},
  "readme": "# proxy-stream\n\nCreate a wrapped stream\n\n## Example\n\n```\nvar proxy = require(\"proxy-stream\")\n    , through = require(\"through-stream\")\n\nfunction map(stream, iterator) {\n    return proxy(stream, write, read, stream.end, pipe)\n\n    function write(chunk) {\n        return stream.write(iterator(chunk))\n    }\n\n    function read(bytes) {\n        var chunk = stream.read(bytes)\n        return chunk === null ? null : iterator(chunk)\n    }\n\n    function pipe(dest) {\n        var mapped = through(function write(chunk, buffer) {\n            buffer.push(iterator(chunk))\n        })\n        mapped.pipe(dest)\n        stream.pipe(mapped)\n        return dest\n    }\n}\n```\n\nProxy stream is used to create a new stream based on another stream. \n\n## Installation\n\n`npm install proxy-stream`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced",
  "_id": "proxy-stream@0.1.0",
  "_from": "proxy-stream@~0.1.0"
}
